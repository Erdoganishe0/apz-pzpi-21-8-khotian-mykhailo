МЕТА РОБОТИ

	Метою роботи є розробка front-end частини додатку "Програмна система для керування пристроями для фізичного зберігання криптовалютних активів фізичною особою або групою фізичних осіб та їх інтеграції в web3 додатки".

ХІД РОБОТИ

	Front-end складова програмної системи виконана за допомогою React.js. Додаток підтримує локалізацію для двох мов - англійської та української,  які можна змінювати в налаштуваннях. Також додаток підтримує інтернаціоналізацію у такому вигляді: дата в форматі DD.MM.YYYY для українського регіону та MM.DD.YYYY для американського. На головній сторінці розміщено портфоліо користувача, що містить в собі граф з балансом користувача з плином часу та таблицю  з розподілом токенів та актуальною ринковою ціною на ці токени. Також користувач може аналогічно переглядати аккаунти інших користувачів, а також список відомих та збережених аккаунтів, а також додавати та прибирати зі збережених. Користувач може переглядати та змінювати власні налаштування, а також отримати QR-код з власною адресою та переказати транзакцію.


1	ДІАГРАМА ПРЕЦЕДЕНТІВ


	Розглянемо діаграму прецедентів для Front-end, наведену в додатку А на рисунку А.1.
Неавторизований користувач може стати авторизованим після авторизації. У разі відсутності аккаунта користувач може зареєструватись. Авторизований користувач може переглядати власне портфоліо, що містить в собі граф з балансом користувача з плином часу та таблицю  з розподілом токенів та актуальною ринковою ціною на ці токени.


2	ДІАГРАМА КОМПОНЕНТ


	Розглянемо діаграму компонент, наведену в додатку Б на рисунку Б.1.
	Кожна компонента має в собі .jsx складову. Стартова компонента - Auth.jsx, відповідальна за авторизацію користувачів. Від неї користувач може потрапити до реєстрації (Register.jsx).Після авторизації користувач потрапляє на сторінку портфоліо, звідки він може потрапити на сторінки аккаунтів (Accounts.jsx) та налаштувань (Settings.jsx). При перегляді сторінки аккаунтів можна перейти на сторінку конкретного гаманця (User.jsx).


3	ДІАГРАМА СТАНІВ


	Розглянемо діаграму станів, наведену в додатку В  на рисунку В.1.
Розглянемо її детальніше. Після відкриття сайта в браузері, неавторизований користувач потрапляє на стартову сторінку авторизації, звідки можна перейти на сторінку реєстрації, якщо він не має аккаунта, і повернутись назад авторизації, якщо він його має. Після авторизації, користувач стає авторизованим, і потрапляє на сторінку перегляду власного портфоліо. Звідти він може потрапити на сторінку аккаунтів або налаштувань. Зі сторінки аккаунтів можна перейти на сторінку конкретного користувача.


4	ДІАГРАМА ДІЯЛЬНОСТІ


	Розглянемо діаграму активності, наведену в додатку Г  на рисунку Г.1.
Розглянемо її детальніше. Після відкриття сайта в браузері, неавторизований користувач потрапляє на стартову сторінку авторизації, звідки він може перейти на сторінку реєстрації у разі відсутності акаунта Після авторизації, користувач стає авторизованим, і потрапляє на сторінку переглядів власного портфоліо. Після натискання на конкретний аккаунт, користувач потрапляє до сторінки конкретного аккаунта, з якої повертається за власним бажанням. З головної сторінки також користувач може попасти на налаштування, якщо натисне на відповідну кнопку в меню. Система припиняє роботу після закриття браузера. Також після натискання кнопки виходу з акаунта, користувач виходить з аккаунта та повертається на головну.

ВИСНОВКИ

	У даній лабораторній роботі було створено клієнтську (front-end) частину для проєкту за темою "Програмна система для керування пристроями для фізичного зберігання криптовалютних активів фізичною особою або групою фізичних осіб та їх інтеграції в web3 додатки" з використанням React.js.
	Посилання на демо-відео:
https://youtu.be/R2NIuxV7Sds
Посилання на репозиторій GitHub:
https://github.com/NureKhotianMykhailo/apz-pzpi-21-8-khotian-mykhail
