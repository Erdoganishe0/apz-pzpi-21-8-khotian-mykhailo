МЕТА РОБОТИ

	Метою цієї лабораторної роботи є  розробка back-end частини для проєкту за темою "Програмна система для керування пристроями для фізичного зберігання криптовалютних активів фізичною особою або групою фізичних осіб та їх інтеграції в web3 додатки".

ХІД РОБОТИ

	У ході цієї лабораторної роботи була створена back-end частина додатку для програмної системи для керування пристроями для фізичного зберігання криптовалютних активів фізичною особою або групою фізичних осіб та їх інтеграції в web3 додатки.Серверна частина була написана на мові програмування Node.js з використанням Express.js framework. У даному проекті використовується MongoDB в якості СУБД. Для шифрування паролів використовується SHA-2 та для створення токенів авторизації було використано JWT (JSON Web Tokens). В якості testnet було обрано Blast-Sepolia.


1	ДІАГРАМА РОЗГОРТАННЯ


	Для створення серверної частини проекту було використано мову програмування Nods.js та фреймворк Express.js.
В якості бази даних було викостано MongoDB через зручність використання NoSQL бази даних в проекті.
Проект було розбито на три шари:
-	Middleware - бізнес логіка, що обраховує результат на основі вхідних даних. 
-	Controller – посередник між бізнес-шаром та запитами відповідно до REST специфікації.
-	Model – моделі об'єктів, що використовуються для взаємодії з базою даних.

Розглянемо Deployment Diagram (діаграму розгортання), зображену в додатку А на рисунку А.1.
Наша програмна система має 3 складових: База даних MongoDB, що відповідає за збереження даних системи та поєднана з back-end частиною нашого застосунку, сама back-end складова, що відповідає за контакт front-end частини з базою даних, авторизацію та реєстрацію нових користувачів, генерацію JWT, створення криптовалютних гаманців та історії їх балансу, отримання актуального курсу токена. Також в нас є front-end складова, що під'єднанна до back-end складовою за допомогою HTTP запитів.


2	ДІАГРАМА ПРЕЦЕДЕНТІВ


	У додатку Б на рисунку Б.1 наведено діаграму прецедентів для загальної архітектури системи. Розглянемо детальніше цю діаграму. Користувач може реєструватись та авторизуватись за допомогою back-end, а також надсилати запити на перегляд власного портфоліо, списку відомих аккаунтів, перегляд портфоліо конкретного аккаунта, змінити власні налаштування, відправка транзакції та отримати QR-code з адресою свого гаманця.


3 ER-МОДЕЛЬ ДАНИХ


	У додатку В на рисунку В.1 наведено ER-модель даних. Для розробки програмного продукту було обрано NOSQL базу даних MongoDB. Під час реалізації бази даних було створена наступна колекція:
-	Users (Таблиця з даними про користувачів та ролі користувачів, налаштування);

Мала кількість колекцій пов'язана з можливістю не зберігати дані про транзакції, а отримати їх напряму з блокчейну, а також нереляційною базою даних, котра дозволяє зменшити кількість таблиць шляхом використання об'єктів та масивів в якості значення.


4 ДІАГРАМА ДІЯЛЬНОСТІ


	У додатку Г на рисунку Г.1 наведено діаграму діяльності, на якій зображено процес надсилання транзакції на інший гаманець та зміна історії балансу користувача.


5 REST СПЕЦИФІКАЦІЯ


	При написанні серверної частини додатку було дотримано принципів REST. Ця архітектура визначає, як система має бути організована для того щоб бути масштабованою та забезпечувати простоту інтеграції з різними компонентами. REST специфікація наведена в таблиці 1.

Таблиця 1 – REST-специфікація
Назва	Метод	Шлях	Тіло запиту
Register	POST	/auth/register	{
“name”: “string”,
“email”: “string”
“pwd”:“string”,
}
Login	POST	/auth/login	{
“email”: “string”,
“pwd”: “string”
}
Logout	GET /auth/logout
Refresh GET /auth/refresh	-
Get user info	GET /api/user	


Продовження таблиці 1
Update user info	PUT /api/user	{
    "username":string,
    "email":"string",
    "roles" :"int",
    "settings" : {
	"isEngLanguage: boolean,
	"isEngRegion": boolean,
	"hideEmptyTokens": boolean",
    },
    "staredAccounts": ["string"],
    "wallet": "string" 
}
Send transaction	POST	/api/sendtrx	{
    "reciever": "string",
    "amount": "float"
}	-
Get wallet	POST	/api/wallet	{
    "address": "string"
}
Get balance info	POST	/api/balance	{
    "address": "string"
}

ВИСНОВКИ

	У даній лабораторній роботі було створено серверну (back-end) частину для проєкту за темою "Програмна система для керування пристроями для фізичного зберігання криптовалютних активів фізичною особою або групою фізичних осіб та їх інтеграції в web3 додатки" з використанням framework Express.js технології Node.js мовою JavaScript та NoSQL бази даних MongoDB.
	Посилання на демо-відео:
https://youtu.be/H0j7OVMrI2A
Посилання на репозиторій GitHub:
https://github.com/NureKhotianMykhailo/apz-pzpi-21-8-khotian-mykhailo