МЕТА РОБОТИ

	Метою цієї лабораторної роботи є  розробка back-end частини для проєкту за темою ""
ХІД РОБОТИ

	У ході цієї лабораторної роботи була створена back-end частина додатку для .Серверна частина була написана на мові програмування Node.js з використанням Express.js framework. У даному проекті використовується MongoDB. Для шифрування паролів та створення токенів авторизації було використано JWT (JSON Web Tokens). В якості testnet було обрано .


1	ДІАГРАМА РОЗГОРТАННЯ

	Для створення серверної частини проекту було використано мову програмування Nods.js та фреймворк Express.js.
	В якості бази даних було викостано MongoDB через зручність використання NOSQL бази даних в проекті.
Проект було розбито на три шари:
-	 User Interface – конфігурація та запити, за якими користувач взаємодіє з API – контролери та роути відповідно до REST специфікації.
-	Бізнес-логіка – моделі даних та їхня обробка, а також методи в яких застосована обробка даних.
-	  Доступ до даних – створенння об'єктів та взаємодія бази даних із сервером.
Розглянемо Deployment Diagram (діаграму розгортання), зображену у додатку А на рисунку А.1.


2	ДІАГРАМА ПРЕЦЕДЕНТІВ

На рисунку Б.1 зображено діаграму прецедентів для загальної архітектури системи. На діаграмі можемо бачити, що адміністратор поділяється на аналітика даних, що має змогу переглядати показники датчиків, місцеположення службовців та їх фізичний стан, а також на адміністратора системи, що відповідає за створення організації, додавання нового службовця до організації, а також оновлення та видалення даних про службовців спеціальних служб та організацій.
Користувач у свою чергу має змогу зареєструватися, увійти в систему,  записати своє місцеположення через датчик геолокації, а також переглянути ці записи, а також записати та переглянути інформацію про свій поточний стан (частоту серцевих скорочень, температуру та тиск). Приклад контролера для запису показників фізичного стану наведено в додатку Ж.


3 ER-МОДЕЛЬ ДАНИХ


У додатку В на рисунку В.1 зображено ER-модель даних. Для розробки програмного продукту було обрано NOSQL базу даних MongoDB. Під час реалізації бази даних було створено наступні колекції:
-	Users (Таблиця з даними про користувачів та ролі користувачів);
-	???

Мала кількість колекцій пов'язана з можливістю не зберігати дані про транзакції, а отримати їх напряму з блокчейну.


4 ДІАГРАМА ДІЯЛЬНОСТІ


У додатку Г на рисунку Г.1 наведено діаграму діяльності, на якій зображено процес підтверждення транзакції та зміна балансу.


5 REST СПЕЦИФІКАЦІЯ


При написанні серверної частини додатку було дотримано принципів REST. Ця архітектура визначає, як система має бути організована для того щоб бути масштабованою та забезпечувати простоту інтеграції з різними компонентами. REST специфікація наведена в таблиці 1.

Таблиця 1 – REST-специфікація
Назва	Метод	Шлях	Тіло запиту
Register	POST	/api/auth/register	{
“name”: “string”,
“email”: “string”
“password”:“string”,
}
Login	POST	/api/auth/login	{
“email”: “string”,
“password”: “string”
}
Logout	POST	/api/auth/logout	-
Create new wallet	POST	/api/admin/employee	{
"employee_id":int,
    "position":"string",
    "gender" :"string",    "user_id" : int,
    "organization_id": int
}
    "user_id" : int,
    "organization_id": int
}
Create transaction	POST	/api/admin/employee	{
"employee_id":int,
    "position":"string",
    "gender" :"string",    "user_id" : int,
    "organization_id": int
}
    "user_id" : int,
    "organization_id": int
}
Get accounts GET	/api/admin/:id	-
Get wallet	GET	/api/admin/organizations	-
Get user by id	GET	/api/admin/employees/:id	-


6 АРХІТЕКТУРА СЕРВЕРНОЇ ЧАСТИНИ


	Візуальне зображення структури серверу зображено у додатку Д на рисунку Д.1. Для розробки архітектури серверної частини було використано стандартну архітектуру проекту Laravel, що містить директорії Http/Controllers де зберігаються контролери де і прописана основна логіка серверної частини відповідно до кожного ендпоінту. У директорії Models містяться моделі, де прописані зв’язки з таблицями бази даних. У файлі routes/api.php прописані усі роути серверної частини. У директорії database/migrations описані усі міграції що були створені.

ВИСНОВКИ
